
1)TWO SUM WITH SINGLE FOR LOOP:-

public class Main{
    public static int[]twosum(int arr[],int k){
        int n = arr.length;
        int result[] = new int[2];
        HashMap<Integer,Integer> map = new HashMap<>();
        for(int i=0;i<n;i++){
            if(map.containsKey(k-arr[i])){
                result[1] = i;
                result[0] = map.get(k-arr[i]);
                return result;
            }
            map.put(arr[i],i);
        }
        return result;
    }
    public static void main(String[] args){
        int arr[] = {1,2,3,5,6};
        int n = arr.length;
        int result[] = twosum(arr,11);
        System.out.print("["+result[0]+",");
        System.out.print(result[1]+"]");
    }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

2) TWO POINTER APPROACH:

public class Main{
    public static int[] twosum(int arr[],int k){
        int n = arr.length;
        int l = 0;
        int r = n-1;
        while(l < r){
            if(arr[l]+arr[r] == k)
            {
                return new int[] {arr[l],arr[r]};
            }
            
            
            else if(arr[l]+arr[r] < k){
                l++;
            }
            else{
                r--;
            }
        }
        return new int[] {};
    }
    public static void main(String[] args){
        int arr[] = {1,2,3,4,5};
        int n = arr.length;
        twosum(arr,3);
        System.out.print(twosum(arr,3));
        
---------------------------------------------------------------\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\-------------------------------------------------------------------------------


3)TWO SUM USING HASHING WITH TWO FOR LOOPS:-



public class Main {
    public static int[] pairs(int arr[],int k){
        int n = arr.length;
        HashMap<Integer,Integer> map =new HashMap<Integer,Integer>();
        for(int i=0;i<n;i++){
                map.put(arr[i],i);
                }
        for(int i=0;i<n;i++){
            int complement = k-arr[i];
            if(map.containsKey(complement) && map.get(complement)!=i){
                return new int[]{i,map.get(complement)};
            }
        }
        return new int[]{-1,-1};
        }
    
    public static void main(String[] args) {
            int arr[] = {1,2,3,4,5};
        int n = arr.length;
        int result[] = pairs(arr,7);
        System.out.print("["+result[0]+" ,");
        System.out.print(result[1]+"]");
    }
}



    }
}